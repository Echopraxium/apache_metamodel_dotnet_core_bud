*****************************************************************************************
*****************************************************************************************
                             Java to C# conversion recipes

Project:                  Porting Apache MetaModel to C# .Net Core
Author:                   Michel Kern (echopraxium)
License of this document: Apache 2.0
*****************************************************************************************
*****************************************************************************************
http://www.25hoursaday.com/csharpvsjava.html
https://www.codeproject.com/Articles/4881/A-Comparative-Study-of-Java-and-C
https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java

** ToDo **
* ? Check in ported code if 'IEnumerable' was erroneously used istead of 'IEnumerator'
* Equals: http://www.aaronstannard.com/overriding-equality-in-dotnet/

=========================================================================================
1. Padawan Level : straightforward lightsaber techniques
=========================================================================================

1.1. Types
---------------------
* see: https://www.ibm.com/support/knowledgecenter/en/SSTVLU_8.6.0/com.ibm.websphere.extremescale.doc/rxsxdfequiv.html

1.1.1. Common conversions
-------------------------
* java: object o;
  C#:   object o; // object <=> System.Object

* java: Objets.equals(o1, o2)
  C@:   object.Equals(o1, o2)

* java: getComponentType()
  C#:   GetElementType() 
        https://bytes.com/topic/c-sharp/answers/231284-getting-underlying-type-array-type

* java: instanceof
  C#:   is 

* java: o.getClass();
  C#:   o.GetType();

* java: obj instanceof BaseObject
  C#:   obj is BaseObject

* java: o.getClass().isArray();
  C#:   o.GetType().IsArray;

* java: Boolean b;
  C#:   bool    b;

* java: ArrayList<String> items = new ArrayList<String>();
  C#:   List<String>      items = new List<String>();

* java: Map<String> items = new ArrayList<String>();
  C#:   Dictionary<string> items = new List<string>();
  https://stackoverflow.com/questions/687942/java-map-equivalent-in-c-sharp?rq=1

* java: HashMap<String> items = new ArrayList<String>();
  C#:   Dictionary<string>      items = new List<string>();
  https://stackoverflow.com/questions/1273139/c-sharp-java-hashmap-equivalent

* java: Iterable<String>    items;
  C#:   IEnumerable<string> items;
---- 1.1.1.  Common conversions


1.1.2. Objects
---------------------
* java: object o;
  C#:   object o; // object <=> System.Object

* java: Objets.equals(o1, o2)
  C@:   object.Equals(o1, o2)
---- 1.1.2. Objects


1.1.3. Strings
---------------------
* java: string s;
  C#:   string s;

* java: toUpperCase();
  C#:   ToUpper();

* java: trim();
  C#:   Trim();

* java: lastIndexOf();
  C#:   LastIndexOf();

* java: StringBuilder sb;
  C#:   // using System.Text;
        StringBuilder sb;

* java: s1.equalsIgnoreCase(s2))
  C#:   s1.Equals(s2, StringComparison.CurrentCultureIgnoreCase))
---- 1.1.3. Strings


1.1.4. Default Type Conversions
-------------------------------
* java: Object
  C#:   CsObject

* java: Date
  C#:   CsDate
---- 1.1.4. Default Type Conversions


* java: // import java.util.HashSet;
        HashSet<Table> set = new HashSet<Table>();
  C#:   // using System.Collections.Generic;
        HashSet<Table> set = new HashSet<Table>();

* java: InetAddress
  C#:   IPAddress 
  http://www.snmpsharpnet.com/?page_id=60
----- end of '1.1. Types'


1.2. Interfaces
-----------------------
* java: Serializable
  C#:   Nothing in .Net Core. Replaced by  'CsSerializableAttribute' attribute

* java: Cloneable
  C#:   ICloneable 
----- end of '1.2. Interfaces'


1.3. Collection methods
-----------------------
* java: Collection<string>
  C#:   IList<string>

* java: // String[] values;
        int length = Array.getLength(values);
  C#:   // string[] values;
        int length = ((Array) values).GetLength(1);

* java: Iterator<Object>     it1 = list1.iterator();
  C#:   IEnumerator<object>  it1 = list1.GetEnumerator();

* java: // ArrayList<String> items = new ArrayList<String>();
        int items_count = items.size();
  C#:   // ListsString> items = new List<string>();
        int items_count = items.Count;

* java: // string[] items;
        int items_count = items.length;
  C#:   // string[] items;
        int items_count = items.Length;

* java: // ArrayList<String> items;
        for (string item : items)
  C#:   // List<string> items;
        foreach (List<string> item in items)

* java: // ArrayList<String> items;
        if (items.contains(...)
  C#:   // List<string> items;
        if (items.Contains(...)

* java: // Map<String, Object> items;
        items.put(key, o);
  C#:   // Dictionary<string, object> items;
        items.Add(key, o);

* java: // object[] objects;
        object o = Array.get(objects, i);
  C#:   // object[] objects;
        object o = ((Array) objects)[i];

* java: // object[] objects;
        object o = Array.get(objects, i);
  C#:   // object[] objects;
        object o = ((Array) objects)[i];


>> ---- isEmpty() ----
* java: // ArrayList<String> data = ArrayList<String>();
        if (data.isEmpty())
  C#:   // List<string> data = List<string>();
        if (EnumerableUtils.IsEmpty<Row>(data)

* java: // Set<String> set = new Set<String>();
        set.addAll(items);
  C#:   // HashSet<string> set = new HashSet<Table>();
        set.UnionWith(items);
----- end of '1.3. Collection methods'


1.4. Annotations
-----------------------
* java: // interface service annotation:
        @Override
		public string getName();
  C#:   string getName(); // annotation is useless, 'public' keyword is forbidden in C# interface method declarations

* java: @Deprecated            // Annotation
  C#:   [System.Obsolete]      // Annotation
  https://stackoverflow.com/questions/1759352/how-do-i-mark-a-method-as-obsolete-deprecated
----- end of '1.4. Annotations'


1.4. Input Output
-----------------------
* java: implements Serializable / extends Serializable
  C#:   ISerializable / : ISerializable

* java: OutputStream InputStream
  C#:   System.IO.Stream
----- end of '1.4. Input Output'


1.5. Exceptions
-----------------------
* java: IllegalStateException
  C#:   InvalidOperationException // using System;

* java: IllegalArgumentException
  C#:   ArgumentException // using System;

* java: NumberFormatException
  C#:   FormatException

* java: // in interface class: 
        return_type method_name() throws ..;
  C#:   // in interface class: 
        // C# doesnt support checked exceptions. Maybe a custom method annotation would be a semantic equivalence ?
        return_type method_name(); //throws ..;
----- end of '1.5. Exceptions'


* java: // varargs
        public setValues(Object... values)
  C#:   // parameter arrays
        public setValues(params object[] values)

* java: // interface service declaration: 
	    public string getName();
  C#:   // interface service declaration: 
	    string getName(); // remove 'public' keyword


* java: // implement (or extend) 'Serializable'
        public class implements Serializable
  C#:   // implement (or extend) 'ISerializable'
        using System.Runtime.Serialization; // provides 'ISerializable' interface
		// ...
        public class : ISerializable
		// class must implement GetObjectData()

* java: @Override
	    public string toString() { ... }
  C#:   // List<string> items;
        public override string ToString() { ... } // Uppercase 'T'

* java: // ArrayList<String> items;
        items.add(item);
  C#:   // List<string> items;
        items.Add(item); // Uppercase 'A'

* java: // Call other constructor
        public MyClass(string msg)
        {  
		    this(null, column);
        }
  C#:   // Call other constructor
        public MyClass(string msg): this(null, msg)
        {}


=========================================================================================
2. Knight Level : for the fearless and well trained codecrafters
=========================================================================================

2.1. Variable identifier is a reserved keyword in C#
------------------------------------------------------------------
* java: String string;
  C#:   string string_value;
---- 2.1. Variable identifier is a reserved keyword in C#

2.2. Parameter identifier is a reserved keyword in C#
------------------------------------------------------------------
* java: public void setValue(String string);
  C#:   public void setValue(String string_arg);
---- 2.2. Parameter identifier is a reserved keyword in C#

* java: // Interface class with static final fields
  C#:   // Abstract class with static readonly fields

* java: // No implementation of an interface service (e.g. 'public string getName();') in Abstract class  
  C#:   public abstract string getName();

* java: ArrayList<T> a;   
  C#:   List<T>      a;

* java: static final field_name
  C#:   static readonly field_name

* java: // in interface class: 
        return_type method_name() throws ..;
  C#:   // in interface class: 
        return_type method_name(); //throws ..;


=========================================================================================
3. Master Level : beware the Dark Side of object Oriented design  
=========================================================================================

3.1. Anonymous implementation class
-----------------------------------
// e.g. Conversion for getComparable() method of BooleanComparator class
* java:	public static Comparable<Object> getComparable(Object object) {
		final Boolean b = toBoolean(object);
		return new Comparable<Object>() {

			    @Override
			    public boolean equals(Object obj) {
				    return _instance.equals(obj);
			    }

			    public int compareTo(Object o) {
				    return _instance.compare(b, o);
			    }

			    @Override
			    public String toString() {
				    return "BooleanComparable[boolean=" + b + "]";
	   		    }
		    };
	    }

  C#:   private class Boolean_Comparable_Impl_ : IComparable<object>
        {
            object _o_;
            public Boolean_Comparable_Impl_(object object_arg)
            {
                _o_ = object_arg;
            } // constructor

            public bool equals(Object obj)
            {
                return _instance.Equals(obj);
            } // equals();

            public int CompareTo(Object o)
            {
               return _instance.Compare(_o_, o);
            }

            public String toString()
            {
               return "BooleanComparable[boolean=" + _o_ + "]";
            }
        } // Boolean_Comparable_Impl_ class

        public static IComparable<object> getComparable(Object object_arg)
        {
            return new Boolean_Comparable_Impl_(object_arg);
        } // getComparable()
---------- 3.1. Anonymous implementation class